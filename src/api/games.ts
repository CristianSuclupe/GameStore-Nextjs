import { ENV } from "../utils";
import { PlatFormType } from ".";
// Generated by https://quicktype.io

export type GameData = {
  id: number;
  attributes: GameAttributes;
};

export type GameAttributes = {
  title: string;
  price: number;
  discount: number;
  slug: string;
  summary: string;
  video: string;
  releaseDate: string;
  createdAt: string;
  updatedAt: string;
  publishedAt: string;
  platform: PlatFormType;
  wallpaper: Wallpaper;
  cover: Cover;
};

export type Wallpaper = {
  data: WallpaperData;
};

export type WallpaperData = {
  id: number;
  attributes: WallpaperAttributes;
};

export type WallpaperAttributes = {
  name: string;
  witdh: number;
  height: number;
  url: string;
  size: number;
};

type Cover = {
  data: CoverData;
};

type CoverData = {
  id: number;
  attributes: CoverAttributes;
};

type CoverAttributes = {
  name: string;
  width: number;
  height: number;
  url: string;
  size: number;
};
export class Game {
  async getLastGamePublished() {
    try {
      const sort = "sort=publishedAt:desc";
      const pagination = "pagination[limit]=1";
      const populate = "populate=*";
      const url = `${ENV.API_URL}/${ENV.ENDPOINTS.GAME}?${sort}&${pagination}&${populate}`;
      const response = await fetch(url);
      const result = await response.json();
      if (response.status !== 200) throw result;
      return result;
    } catch (error) {
      throw error;
    }
  }

  async getLatestPublished({ limit = 9, platformId = 0 }) {
    try {
      const filterPlatform =
        platformId && `filters[platform][id][$eq]=${platformId}`;
      const paginationLimit = `pagination[limit]=${limit}`;
      const sort = `sort[1]=publishedAt:desc`;
      const populate = `populate=*`;
      const urlParams = `${sort}&${paginationLimit}&${filterPlatform}&${populate}`;
      const url = `${ENV.API_URL}/${ENV.ENDPOINTS.GAME}?${urlParams}`;
      const response = await fetch(url);
      const result = await response.json();
      if (response.status !== 200) throw result;
      return result;
    } catch (error) {
      throw error;
    }
  }

  async getGameByPlatformSlug(platform: string, page: number) {
    try {
      const filters = `filters[platform][slug][$eq]=${platform}`;
      const pagination = `pagination[page]=${page}&pagination[pageSize]=30`;
      const populate = "populate=*";
      const urlParams = `${filters}&${pagination}&${populate}`;
      const url = `${ENV.API_URL}/${ENV.ENDPOINTS.GAME}?${urlParams}`;
      console.log(url);
      const response = await fetch(url);
      const result = await response.json();
      if (response.status !== 200) throw result;
      console.log(result);
      return result;
    } catch (error) {
      throw error;
    }
  }
}
